function [udataset]  = eegc3_smr_data4selection(dataset, Classifier, norm)
%
% function [udataset] = eegc3_smr_data4selection(dataset,
% Classifier)
%
% Function preparing the dataset for feature selection (CVA). 
% 
% Inputs: 
%
% dataset: Struct holding the data and labels. Data and labels are
% separated in runs (dataset.run{i}.data, dataset.run{i}.labels) according 
% to the provided GDF files. The fields of each run are:
%   data: Data matrix samples x frequencies x channels
%   labels: Labels vector, samples x 1
%   path: Filepath of the GDF file corresponding to this run
%
% Classifier: Classifier structure corresponding to the classifier to be
% trained. Task information is needed to extract only the data for the 
% required from the overall pool of samples
% norm: Boolean specifyubg whether PSD features should be normalized for
% feature selection
% 
% Ouputs:
% udataset: Cropped and reshaped dataset
%
% Both udataset and ndataset have the same structure as the input dataset,
% but contain only samples of the two requested classes
%

% Identify the requested classes in each run in the dataset

RunNum = length(dataset.run);

UsedRun = 0;

for i=1:RunNum
    
    % Search for the classes
    Right = find(ismember(dataset.run{i}.labels, Classifier.task_right));
    Left = find(ismember(dataset.run{i}.labels, Classifier.task_left));
    LeftOrRight = find(ismember(dataset.run{i}.labels,...
        [Classifier.task_left Classifier.task_right]));
    
    NRight  = length(Right);
    NLeft  = length(Left);
    
    if(NRight == 0 || NLeft == 0)
        disp(['[eegc3_smr_data4selection] Run ' dataset.run{i}.path...
            ' does not contain one or both of the requested classes!!'...
            ' This run will be ommited from further processing']);
        
    else
        
        UsedRun = UsedRun + 1;
        
        % Remap labels
        disp('[eegc3_smr_data4selection] Remapping labels');
        dataset.run{i}.labels(Right) = 1;
        dataset.run{i}.labels(Left) = 2;
        
        
        % Keep only class data
        disp(['[eegc3_smr_data4selection] Cropping out irrelevant data']);
        cdataset.run{UsedRun}.data = ...
            dataset.run{i}.data(LeftOrRight,:,:);
        cdataset.run{UsedRun}.labels = ...
            dataset.run{i}.labels(LeftOrRight);
        cdataset.run{UsedRun}.path = dataset.run{i}.path;
        cdataset.run{UsedRun}.trial = ...
            dataset.run{i}.trial(LeftOrRight);
        
        
        if(norm)
            
            % Normalize
            disp(['[eegc3_smr_data4selection] Normalizing dataset']);
            for sample = 1:size(cdataset.run{UsedRun}.data,1)
                tmp = eegc3_normalize(squeeze(cdataset.run{UsedRun}.data(sample,:,:))')';
                ndataset.run{UsedRun}.data(sample,:,:) = tmp;
            end
            ndataset.run{UsedRun}.labels = cdataset.run{UsedRun}.labels;
            ndataset.run{UsedRun}.trial = cdataset.run{UsedRun}.trial;
            ndataset.run{UsedRun}.path = dataset.run{i}.path;
        end
        
        ndataset = {};
        
        % Reshape for later use
        disp(['[eegc3_smr_data4selection] Reshaping dataset to feature'...
                ' vectors for unnormalized data']);
        [udataset.run{UsedRun}.data udataset.run{UsedRun}.labels] = ...
            eegc3_reshape_sbc2s(cdataset.run{UsedRun}.data, ...
            cdataset.run{UsedRun}.labels);
        udataset.run{UsedRun}.labels = cdataset.run{UsedRun}.labels;
        udataset.run{UsedRun}.trial = cdataset.run{UsedRun}.trial;
        udataset.run{UsedRun}.path = dataset.run{i}.path;
    
    end
end
